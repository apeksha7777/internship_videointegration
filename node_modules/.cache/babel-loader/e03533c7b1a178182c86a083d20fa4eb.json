{"ast":null,"code":"var _jsxFileName = \"/home/apeksha/intern/src/components/Arrange.js\";\nimport React from 'react';\nimport AddLink from './AddLink';\nimport { BrowserRouter as Router, Switch, Link, Route } from 'react-router-dom';\nimport { Button } from 'react-bootstrap';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\n\nclass Arrange extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.DragToReorderList = () => {\n      const items = [{\n        number: \"1\",\n        title: \"🇦🇷 Argentina\"\n      }, {\n        number: \"2\",\n        title: \"🤩 YASS\"\n      }, {\n        number: \"3\",\n        title: \"👩🏼‍💻 Tech Girl\"\n      }, {\n        number: \"4\",\n        title: \"💋 Lipstick & Code\"\n      }, {\n        number: \"5\",\n        title: \"💃🏼 Latina\"\n      }];\n      initialDnDState = {\n        draggedFrom: null,\n        draggedTo: null,\n        isDragging: false,\n        originalOrder: [],\n        updatedOrder: []\n      };\n      const [list, setList] = React.useState(items);\n      const [dragAndDrop, setDragAndDrop] = React.useState(initialDnDState); // onDragStart fires when an element\n      // starts being dragged\n\n      const onDragStart = event => {\n        const initialPosition = Number(event.currentTarget.dataset.position);\n        setDragAndDrop({ ...dragAndDrop,\n          draggedFrom: initialPosition,\n          isDragging: true,\n          originalOrder: list\n        }); // Note: this is only for Firefox.\n        // Without it, the DnD won't work.\n        // But we are not using it.\n\n        event.dataTransfer.setData(\"text/html\", '');\n      }; // onDragOver fires when an element being dragged\n      // enters a droppable area.\n      // In this case, any of the items on the list\n\n\n      const onDragOver = event => {\n        // in order for the onDrop\n        // event to fire, we have\n        // to cancel out this one\n        event.preventDefault();\n        let newList = dragAndDrop.originalOrder; // index of the item being dragged\n\n        const draggedFrom = dragAndDrop.draggedFrom; // index of the droppable area being hovered\n\n        const draggedTo = Number(event.currentTarget.dataset.position);\n        const itemDragged = newList[draggedFrom];\n        const remainingItems = newList.filter((item, index) => index !== draggedFrom);\n        newList = [...remainingItems.slice(0, draggedTo), itemDragged, ...remainingItems.slice(draggedTo)];\n\n        if (draggedTo !== dragAndDrop.draggedTo) {\n          setDragAndDrop({ ...dragAndDrop,\n            updatedOrder: newList,\n            draggedTo: draggedTo\n          });\n        }\n      };\n\n      const onDrop = event => {\n        setList(dragAndDrop.updatedOrder);\n        setDragAndDrop({ ...dragAndDrop,\n          draggedFrom: null,\n          draggedTo: null,\n          isDragging: false\n        });\n      };\n\n      onDragLeave = () => {\n        setDragAndDrop({ ...dragAndDrop,\n          draggedTo: null\n        });\n      }; // Not needed, just for logging purposes:\n\n\n      React.useEffect(() => {\n        console.log(\"Dragged From: \", dragAndDrop && dragAndDrop.draggedFrom);\n        console.log(\"Dropping Into: \", dragAndDrop && dragAndDrop.draggedTo);\n      }, [dragAndDrop]);\n      React.useEffect(() => {\n        console.log(\"List updated!\");\n      }, [list]);\n      return /*#__PURE__*/React.createElement(\"section\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 16\n        }\n      }, /*#__PURE__*/React.createElement(\"ul\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }\n      }, list.map((item, index) => {\n        return /*#__PURE__*/React.createElement(\"li\", {\n          key: index,\n          \"data-position\": index,\n          draggable: true,\n          onDragStart: onDragStart,\n          onDragOver: onDragOver,\n          onDrop: onDrop,\n          onDragLeave: onDragLeave,\n          className: dragAndDrop && dragAndDrop.draggedTo === Number(index) ? \"dropArea\" : \"\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 14\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 16\n          }\n        }, item.number), /*#__PURE__*/React.createElement(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 16\n          }\n        }, item.title), /*#__PURE__*/React.createElement(\"i\", {\n          class: \"fas fa-arrows-alt-v\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 16\n          }\n        }));\n      })));\n    };\n\n    this.state = {\n      arrangeitems: this.props.location\n    };\n  }\n\n  // onDragEnd = result => {\n  //     const { destination, source, reason } = result;\n  //     // Not a thing to do...\n  //     if (!destination || reason === 'CANCEL') {\n  //       return;\n  //     }\n  //     if (\n  //       destination.droppableId === source.droppableId &&\n  //       destination.index === source.index\n  //     ) {\n  //       return;\n  //     }\n  //     const arrangeitems = Object.assign([], this.state.arrangeitems);\n  //     const droppedUser = this.state.arrangeitems[source.index];\n  //     arrangeitems.splice(source.index, 1);\n  //     arrangeitems.splice(destination.index, 0, droppedUser);\n  //     this.setState({\n  //         arrangeitems\n  //     });\n  //   }\n  //  handleDragStart(e) {\n  //     this.style.opacity = '0.4';\n  //     dragSrcEl = this;\n  //     e.dataTransfer.effectAllowed = 'move';\n  //     e.dataTransfer.setData('text/html', this.innerHTML);\n  //   }\n  //    handleDrop(e) {\n  //     e.stopPropagation();\n  //       if (dragSrcEl !== this) {\n  //         dragSrcEl.innerHTML = this.innerHTML;\n  //         this.innerHTML = e.dataTransfer.getData('text/html');\n  //       }\n  //       return false;\n  //     }\n  render() {\n    const {\n      items\n    } = this.state.arrangeitems;\n    console.log(items);\n\n    if (items) {\n      // console.log(items);\n      const listItems = items.map(item => {\n        return (\n          /*#__PURE__*/\n          // <DragDropContext onDragEnd={this.onDragEnd}>\n          // <Droppable droppableId={item.key}>\n          //     { provided=>(\n          React.createElement(\"div\", {\n            className: \"list\",\n            key: item.key,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 209,\n              columnNumber: 33\n            }\n          }, /*#__PURE__*/React.createElement(\"p\", {\n            draggable: \"true\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 211,\n              columnNumber: 34\n            }\n          }, /*#__PURE__*/React.createElement(\"i\", {\n            class: \"fas fa-arrows-alt\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 212,\n              columnNumber: 34\n            }\n          }), item.text)) //      )\n          // }\n          //  </Droppable>\n          //  </DragDropContext>\n\n        );\n      });\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 21\n        }\n      }, listItems);\n    }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null);\n  }\n\n} // function Arrange(props) {\n//     const {items}=props.location.state;\n//    // console.log(data);\n//     // const items=props.itemsarr;\n//     if (items) {\n//        // console.log(items);\n//         const listItems=items.map(item => {\n//             return <div className=\"list\" key={item.key}>\n//                 <p>{item.text}\n//                 </p>\n//             </div>\n//         })\n//         return(\n//             <div>{listItems}</div>\n//         )\n//     }\n//     return(\n//         <div>\n//             <h1>rearrage</h1>\n//             <Link to=\"/PlayVideo\">\n//            <Button renderAs=\"button\">\n//            <span>next</span>\n//            </Button>  </Link>\n//         </div>\n//     )\n// }\n\n\nexport default Arrange;","map":{"version":3,"sources":["/home/apeksha/intern/src/components/Arrange.js"],"names":["React","AddLink","BrowserRouter","Router","Switch","Link","Route","Button","DragDropContext","Droppable","Arrange","Component","constructor","props","DragToReorderList","items","number","title","initialDnDState","draggedFrom","draggedTo","isDragging","originalOrder","updatedOrder","list","setList","useState","dragAndDrop","setDragAndDrop","onDragStart","event","initialPosition","Number","currentTarget","dataset","position","dataTransfer","setData","onDragOver","preventDefault","newList","itemDragged","remainingItems","filter","item","index","slice","onDrop","onDragLeave","useEffect","console","log","map","state","arrangeitems","location","render","listItems","key","text"],"mappings":"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","sourcesContent":["import React from 'react'\nimport AddLink from './AddLink';\nimport{BrowserRouter as Router,Switch,Link,Route} from 'react-router-dom'\nimport { Button} from 'react-bootstrap';\nimport { DragDropContext,Droppable } from 'react-beautiful-dnd';\n\nclass Arrange extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n        this.state={\n            arrangeitems:this.props.location,\n             }\n    }\n     \n       DragToReorderList = () => {\n       const items = [\n            { number: \"1\", title: \"🇦🇷 Argentina\"},\n            { number: \"2\", title: \"🤩 YASS\"},\n            { number: \"3\", title: \"👩🏼‍💻 Tech Girl\"},\n            { number: \"4\", title: \"💋 Lipstick & Code\"},\n            { number: \"5\", title: \"💃🏼 Latina\"},\n           ]\n         initialDnDState = {\n            draggedFrom: null,\n            draggedTo: null,\n            isDragging: false,\n            originalOrder: [],\n            updatedOrder: []\n           }\n        const [list, setList] = React.useState(items);\n        const [dragAndDrop, setDragAndDrop] = React.useState(initialDnDState);\n        \n        \n        // onDragStart fires when an element\n        // starts being dragged\n        const onDragStart = (event) => {\n         const initialPosition = Number(event.currentTarget.dataset.position);\n         \n         setDragAndDrop({\n          ...dragAndDrop,\n          draggedFrom: initialPosition,\n          isDragging: true,\n          originalOrder: list\n         });\n         \n         \n         // Note: this is only for Firefox.\n         // Without it, the DnD won't work.\n         // But we are not using it.\n         event.dataTransfer.setData(\"text/html\", '');\n        }\n        \n        // onDragOver fires when an element being dragged\n        // enters a droppable area.\n        // In this case, any of the items on the list\n        const onDragOver = (event) => {\n         \n         // in order for the onDrop\n         // event to fire, we have\n         // to cancel out this one\n         event.preventDefault();\n         \n         let newList = dragAndDrop.originalOrder;\n        \n         // index of the item being dragged\n         const draggedFrom = dragAndDrop.draggedFrom; \n       \n         // index of the droppable area being hovered\n         const draggedTo = Number(event.currentTarget.dataset.position); \n       \n         const itemDragged = newList[draggedFrom];\n         const remainingItems = newList.filter((item, index) => index !== draggedFrom);\n       \n          newList = [\n           ...remainingItems.slice(0, draggedTo),\n           itemDragged,\n           ...remainingItems.slice(draggedTo)\n          ];\n           \n         if (draggedTo !== dragAndDrop.draggedTo){\n          setDragAndDrop({\n           ...dragAndDrop,\n           updatedOrder: newList,\n           draggedTo: draggedTo\n          })\n         }\n       \n        }\n        \n        const onDrop = (event) => {\n         \n         setList(dragAndDrop.updatedOrder);\n         \n         setDragAndDrop({\n          ...dragAndDrop,\n          draggedFrom: null,\n          draggedTo: null,\n          isDragging: false\n         });\n        }\n       \n       \n        onDragLeave = () => {\n          setDragAndDrop({\n          ...dragAndDrop,\n          draggedTo: null\n         });\n         \n        }\n        \n        // Not needed, just for logging purposes:\n        React.useEffect( ()=>{\n         console.log(\"Dragged From: \", dragAndDrop && dragAndDrop.draggedFrom);\n         console.log(\"Dropping Into: \", dragAndDrop && dragAndDrop.draggedTo);\n        }, [dragAndDrop])\n        \n        React.useEffect( ()=>{\n         console.log(\"List updated!\");\n        }, [list])\n        \n           return(\n               <section>\n          <ul>\n           \n           {list.map( (item, index) => {\n            return(\n             <li \n              key={index}\n              \n              data-position={index}\n              draggable\n              \n              onDragStart={onDragStart}\n              onDragOver={onDragOver}\n              onDrop={onDrop}\n              \n              onDragLeave={onDragLeave}\n              \n              className={dragAndDrop && dragAndDrop.draggedTo=== Number(index) ? \"dropArea\" : \"\"}\n              >\n               <span>{item.number}</span>\n               <p>{item.title}</p>\n               <i class=\"fas fa-arrows-alt-v\"></i>\n             </li>\n            )\n           })}\n            \n          </ul>\n               </section>\n               )\n       };\n    // onDragEnd = result => {\n    //     const { destination, source, reason } = result;\n    //     // Not a thing to do...\n    //     if (!destination || reason === 'CANCEL') {\n    //       return;\n    //     }\n    \n    //     if (\n    //       destination.droppableId === source.droppableId &&\n    //       destination.index === source.index\n    //     ) {\n    //       return;\n    //     }\n    \n    //     const arrangeitems = Object.assign([], this.state.arrangeitems);\n    //     const droppedUser = this.state.arrangeitems[source.index];\n\n\n    //     arrangeitems.splice(source.index, 1);\n    //     arrangeitems.splice(destination.index, 0, droppedUser);\n    //     this.setState({\n    //         arrangeitems\n    //     });\n    //   }\n    //  handleDragStart(e) {\n    //     this.style.opacity = '0.4';\n    \n    //     dragSrcEl = this;\n    \n    //     e.dataTransfer.effectAllowed = 'move';\n    //     e.dataTransfer.setData('text/html', this.innerHTML);\n    //   }\n    //    handleDrop(e) {\n    //     e.stopPropagation();\n      \n    //       if (dragSrcEl !== this) {\n    //         dragSrcEl.innerHTML = this.innerHTML;\n    //         this.innerHTML = e.dataTransfer.getData('text/html');\n    //       }\n      \n    //       return false;\n    //     }\nrender(){\n    const { items } = this.state.arrangeitems\n    console.log(items);\n    \n    if (items) {\n               // console.log(items);\n               \n                const listItems=items.map(item => {\n                    return (\n                        // <DragDropContext onDragEnd={this.onDragEnd}>\n                        // <Droppable droppableId={item.key}>\n                        //     { provided=>(\n                               \n                                <div \n                                 className=\"list\" key={item.key}>\n                                 <p draggable=\"true\">\n                                 <i class=\"fas fa-arrows-alt\"></i>\n                                 {item.text}\n                                 </p>\n                                 </div>\n                               \n                                \n                            //      )\n\n                            // }\n                       \n                        //  </Droppable>\n                        //  </DragDropContext>\n                    )\n                })\n                return(\n                    <div>{listItems}</div>\n                )\n              \n        \n            }\n    return(\n        <>\n       \n\n        </>\n\n    )\n}\n}\n// function Arrange(props) {\n//     const {items}=props.location.state;\n//    // console.log(data);\n//     // const items=props.itemsarr;\n//     if (items) {\n//        // console.log(items);\n//         const listItems=items.map(item => {\n//             return <div className=\"list\" key={item.key}>\n//                 <p>{item.text}\n//                 </p>\n                \n//             </div>\n//         })\n//         return(\n//             <div>{listItems}</div>\n//         )\n\n//     }\n//     return(\n//         <div>\n//             <h1>rearrage</h1>\n//             <Link to=\"/PlayVideo\">\n//            <Button renderAs=\"button\">\n//            <span>next</span>\n//            </Button>  </Link>\n//         </div>\n//     )\n   \n// }\n\n\n\nexport default Arrange\n"]},"metadata":{},"sourceType":"module"}